"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var bedrock_client_1 = require("@ephox/bedrock-client");
var Compare = require("ssephox/sugar/api/dom/Compare");
var Hierarchy = require("ssephox/sugar/api/dom/Hierarchy");
var Insert = require("ssephox/sugar/api/dom/Insert");
var InsertAll = require("ssephox/sugar/api/dom/InsertAll");
var SugarElement_1 = require("ssephox/sugar/api/node/SugarElement");
bedrock_client_1.UnitTest.test('HierarchyTest', function () {
    var div = SugarElement_1.SugarElement.fromTag('div');
    var p1 = SugarElement_1.SugarElement.fromTag('p');
    var p2 = SugarElement_1.SugarElement.fromTag('p');
    var p1text = SugarElement_1.SugarElement.fromText('One');
    var p1textb = SugarElement_1.SugarElement.fromText(', two');
    var p1span = SugarElement_1.SugarElement.fromTag('span');
    var p1span1 = SugarElement_1.SugarElement.fromText('cat');
    var p1span2 = SugarElement_1.SugarElement.fromText(' dog ');
    var p2br = SugarElement_1.SugarElement.fromTag('br');
    InsertAll.append(div, [p1, p2]);
    InsertAll.append(p1, [p1text, p1textb, p1span]);
    InsertAll.append(p1span, [p1span1, p1span2]);
    Insert.append(p2, p2br);
    bedrock_client_1.Assert.eq('', [], Hierarchy.path(div, div).getOrDie());
    bedrock_client_1.Assert.eq('', [0], Hierarchy.path(div, p1).getOrDie());
    bedrock_client_1.Assert.eq('', [1], Hierarchy.path(div, p2).getOrDie());
    bedrock_client_1.Assert.eq('', [0, 0], Hierarchy.path(div, p1text).getOrDie());
    bedrock_client_1.Assert.eq('', [0, 1], Hierarchy.path(div, p1textb).getOrDie());
    bedrock_client_1.Assert.eq('', [0, 2], Hierarchy.path(div, p1span).getOrDie());
    bedrock_client_1.Assert.eq('', [0, 2, 0], Hierarchy.path(div, p1span1).getOrDie());
    bedrock_client_1.Assert.eq('', [0, 2, 1], Hierarchy.path(div, p1span2).getOrDie());
    bedrock_client_1.Assert.eq('', [1, 0], Hierarchy.path(div, p2br).getOrDie());
    bedrock_client_1.Assert.eq('', true, Compare.eq(div, Hierarchy.follow(div, []).getOrDie()));
    bedrock_client_1.Assert.eq('', true, Compare.eq(p1, Hierarchy.follow(div, [0]).getOrDie()));
    bedrock_client_1.Assert.eq('', true, Compare.eq(p2, Hierarchy.follow(div, [1]).getOrDie()));
    bedrock_client_1.Assert.eq('', true, Compare.eq(p1text, Hierarchy.follow(div, [0, 0]).getOrDie()));
    bedrock_client_1.Assert.eq('', true, Compare.eq(p1textb, Hierarchy.follow(div, [0, 1]).getOrDie()));
    bedrock_client_1.Assert.eq('', true, Compare.eq(p1span, Hierarchy.follow(div, [0, 2]).getOrDie()));
    bedrock_client_1.Assert.eq('', true, Compare.eq(p1span1, Hierarchy.follow(div, [0, 2, 0]).getOrDie()));
    bedrock_client_1.Assert.eq('', true, Compare.eq(p1span2, Hierarchy.follow(div, [0, 2, 1]).getOrDie()));
    bedrock_client_1.Assert.eq('', true, Compare.eq(p2br, Hierarchy.follow(div, [1, 0]).getOrDie()));
});
//# sourceMappingURL=HierarchyTest.js.map