"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var bedrock_client_1 = require("@ephox/bedrock-client");
var SugarElement_1 = require("ssephox/sugar/api/node/SugarElement");
var Attribute = require("ssephox/sugar/api/properties/Attribute");
var Class = require("ssephox/sugar/api/properties/Class");
var Classes = require("ssephox/sugar/api/properties/Classes");
var Div_1 = require("ssephox/sugar/test/Div");
var MathElement_1 = require("ssephox/sugar/test/MathElement");
bedrock_client_1.UnitTest.test('ClassTest', function () {
    var c = (0, Div_1.default)();
    var m = (0, MathElement_1.default)();
    var check = function (blob, spot, mogel, t) {
        bedrock_client_1.Assert.eq('', blob, Class.has(c, 'blob'));
        bedrock_client_1.Assert.eq('', spot, Class.has(c, 'spot'));
        bedrock_client_1.Assert.eq('', mogel, Class.has(c, 'mogel'));
        bedrock_client_1.Assert.eq('', t, Class.has(c, 't'));
    };
    check(false, false, false, false);
    Class.add(c, 'blob');
    check(true, false, false, false);
    Class.remove(c, 'blob');
    check(false, false, false, false);
    bedrock_client_1.Assert.eq('empty class attribute was not removed', false, Attribute.has(c, 'class'));
    Class.add(c, 'blob');
    check(true, false, false, false);
    Class.add(c, 'spot');
    check(true, true, false, false);
    Classes.add(c, ['mogel', 't']);
    check(true, true, true, true);
    bedrock_client_1.Assert.eq('', ['blob', 'spot', 'mogel', 't'], Classes.get(c));
    Classes.remove(c, ['mogel', 't']);
    check(true, true, false, false);
    bedrock_client_1.Assert.eq('', ['blob', 'spot'], Classes.get(c));
    Class.remove(c, 'blob');
    check(false, true, false, false);
    bedrock_client_1.Assert.eq('', true, Class.toggle(c, 'mogel'));
    check(false, true, true, false);
    bedrock_client_1.Assert.eq('', false, Class.toggle(c, 'mogel'));
    check(false, true, false, false);
    Class.remove(c, 'spot');
    check(false, false, false, false);
    bedrock_client_1.Assert.eq('empty class attribute was not removed', false, Attribute.has(c, 'class'));
    Class.toggle(c, 'spot');
    check(false, true, false, false);
    Class.toggle(c, 'spot');
    check(false, false, false, false);
    bedrock_client_1.Assert.eq('empty class attribute was not removed', false, Attribute.has(c, 'class'));
    var incorrect = SugarElement_1.SugarElement.fromText('a');
    bedrock_client_1.Assert.eq('', false, Class.has(incorrect, 'anything'));
    bedrock_client_1.Assert.eq('', [], Classes.get(m));
    Classes.add(m, ['a', 'b']);
    bedrock_client_1.Assert.eq('', ['a', 'b'], Classes.get(m));
    Classes.remove(m, ['a', 'b']);
    bedrock_client_1.Assert.eq('', [], Classes.get(m));
    bedrock_client_1.Assert.eq('', false, Class.has(m, 'a'));
    Class.toggle(m, 'a');
    bedrock_client_1.Assert.eq('', ['a'], Classes.get(m));
    Class.toggle(m, 'a');
    bedrock_client_1.Assert.eq('', [], Classes.get(m));
    var tgl = Class.toggler(m, 'tglClass');
    bedrock_client_1.Assert.eq('', false, tgl.isOn());
    tgl.on();
    bedrock_client_1.Assert.eq('', true, tgl.isOn());
    bedrock_client_1.Assert.eq('', ['tglClass'], Classes.get(m));
    tgl.off();
    bedrock_client_1.Assert.eq('', false, tgl.isOn());
    bedrock_client_1.Assert.eq('', [], Classes.get(m));
});
//# sourceMappingURL=ClassTest.js.map